<?xml version="1.0" encoding="UTF-8"?>
<resources>
  <resource>
    <method>POST</method>
    <url>https://www.moneybookers.com/app/test_payment.pl</url>
    <response>HTTP/1.1 200 OK
Server: nginx
Date: Sun, 27 Oct 2013 19:37:12 GMT
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Set-Cookie: SESSION_ID=a50926c17cf0098c434304d0117fb480; path=/; secure; HttpOnly
Set-Cookie: JSESSIONID=a50926c17cf0098c434304d0117fb480; path=/; secure; HttpOnly
Set-Cookie: MB_LANGUAGE=EN; domain=.moneybookers.com; path=/; expires=Wed, 25-Oct-2023 19:37:11 GMT
Expires: Tue, 01 Jan 1980 00:00:00 GMT
Pragma: no-cache
Cache-control: no-cache
X-skrill-status: test_payment::::::
P3P: policyref="/w3c/p3p.xml", CP="NOI DSP COR NID CURa OUR NOR STA"




<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
	<link rel="styleSheet" href="https://i1.mbsvr.net/css/style.css?version=v1.1" type="text/css" media="screen" />
	<link rel="icon" href="https://www.moneybookers.com/favicon.ico" type="image/vnd.microsoft.icon" />
<link rel="styleSheet" href="https://i1.mbsvr.net/css/style_en.css?version=v1.1" type="text/css" media="screen">



	<link rel="styleSheet" href="https://i1.mbsvr.net/css/onboarding.css" type="text/css" media="screen">
	
	<script type="text/javascript">
function ServerDate() {
    //return server date as javascript Date object
    return new Date(2013, 10 - 1, 27);
}
</script>
<script type="text/javascript" src="https://i1.mbsvr.net/main.js"></script>
<script type="text/javascript" src="https://i1.mbsvr.net/ourlib.js"></script>
<script type="text/javascript" src="https://i1.mbsvr.net/regexp.js"></script>    <script type="text/javascript" src="https://i1.mbsvr.net/js/jquery.js"></script>

<script type="text/javascript" src="https://i1.mbsvr.net/js/jqplugins/qtip/mb.jquery.qtip.min.js"></script>
<script type="text/javascript">
    
    if (window.self != window.top) 
        window.top.location = window.self.location; // Kick out of frameset.
    
    // define variables that can be used from any script for specific reason
    var hint_anchors = new Array();
</script>




	<script language="Javascript" src="https://i1.mbsvr.net/js/site.js"></script>
		
	
	
	
	
	
	
	
		
		
		
		
		
		
		
		
			
			
		
		
		
		
		
		
			
			
		
		
		
		
		
		
			
			
		

<title>moneybookers.com</title>
        
        
   

<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

<meta name="Author" content="Skrill ltd.">
<meta name="Publisher" content="Skrill ltd.">
<meta name="Copyright" content="Skrill ltd.">
<meta name="robots" content="all,index,follow" />
<meta name="distribution" content="global" />
<meta name="rating" content="general" />

	
	<!-- language flags styles -->
	<style type="text/css" media="screen">
		/*define js array where mapping between message box and other elements is defined */
			ul#top_nav_language li.en a {
				background-image: url(https://i1.mbsvr.net/images/flag_en.gif);
			}			ul#top_nav_language li.de a {
				background-image: url(https://i1.mbsvr.net/images/flag_de.gif);
			}			ul#top_nav_language li.fr a {
				background-image: url(https://i1.mbsvr.net/images/flag_fr.gif);
			}			ul#top_nav_language li.es a {
				background-image: url(https://i1.mbsvr.net/images/flag_es.gif);
			}			ul#top_nav_language li.it a {
				background-image: url(https://i1.mbsvr.net/images/flag_it.gif);
			}			ul#top_nav_language li.pl a {
				background-image: url(https://i1.mbsvr.net/images/flag_pl.gif);
			}			ul#top_nav_language li.gr a {
				background-image: url(https://i1.mbsvr.net/images/flag_gr.gif);
			}			ul#top_nav_language li.ro a {
				background-image: url(https://i1.mbsvr.net/images/flag_ro.gif);
			}			ul#top_nav_language li.ru a {
				background-image: url(https://i1.mbsvr.net/images/flag_ru.gif);
			}			ul#top_nav_language li.tr a {
				background-image: url(https://i1.mbsvr.net/images/flag_tr.gif);
			}			ul#top_nav_language li.cn a {
				background-image: url(https://i1.mbsvr.net/images/flag_cn.gif);
			}			ul#top_nav_language li.cz a {
				background-image: url(https://i1.mbsvr.net/images/flag_cz.gif);
			}		a.home_signupnow, a.home_signupnow_selected {
			background-image: url(https://i1.mbsvr.net/images/skrill/Buttons/Signup_EN.png);
		}
		a.home_login, a.home_login_selected {
			background-image: url(https://i1.mbsvr.net/images/skrill/Buttons/Login_en.png);
		}
		a.but_logout {
			background-image: url(https://i1.mbsvr.net/images/skrill/Buttons/but_logout_en.gif);
		}
		a.home_promotion {
			background-image: url(https://i1.mbsvr.net/images/skrill/banners/home_promotion_en.gif);
		}
		a.pay_with {
			background-image: url(https://i1.mbsvr.net/images/skrill/banners/pay_with_en.gif);
		}
		div.be_secure {
			background-image: url(https://i1.mbsvr.net/images/skrill/banners/be_secure_en.gif);
		}
		a.main_login {
			background-image: url(https://i1.mbsvr.net/images/skrill/Buttons/Login_en.png);
		}
		a.main_signupnow {
			background-image: url(https://i1.mbsvr.net/images/skrill/Buttons/Signup_EN.png);
		}
		a.main_signupnow_skrill {
			background-image: url(https://i1.mbsvr.net/images/skrill/Buttons/Signup_Skrill_EN.png);
		}
		.left_right_r .right_banners_hover div#banner_upload{
			width: 220px; 
			height: 57px;
			cursor: pointer;
			background-image: url(https://i1.mbsvr.net/images/skrill/banners/upload_en.png);
		}
		.left_right_r .right_banners_hover a:hover div#banner_upload{
	        background-image: url(https://i1.mbsvr.net/images/skrill/banners/UploadFunds-hover-en.png);
        }
		.left_right_r .right_banners_hover div#banner_send{
			width: 220px; 
			height: 57px;
			cursor: pointer;
			background-image: url(https://i1.mbsvr.net/images/skrill/banners/send_money_en.png);
		}
		.left_right_r .right_banners_hover a:hover div#banner_send{
	        background-image: url(https://i1.mbsvr.net/images/skrill/banners/SendMoney-hover-en.png);
        }
		.left_right_r .right_banners_hover div#banner_shopping{
			width: 220px; 
			height: 57px;
			cursor: pointer;
			background-image: url(https://i1.mbsvr.net/images/skrill/banners/go_shopping_en.png);
		}
		.left_right_r .right_banners_hover a:hover div#banner_shopping{
	        background-image: url(https://i1.mbsvr.net/images/skrill/banners/GoShopping-hover-en.png);
        }
		div.col_benefit {
			[if gte IE 7] padding-top: 25px;
			[if gte IE 7] padding-bottom: 25px;
		}	</style>
</head>
<body>
<div id="preloader" class="preloader">    <img src="https://i1.mbsvr.net/favicon.ico"/>
    <img src="https://i1.mbsvr.net/images/left.gif"/>
    <img src="https://i1.mbsvr.net/images/left2.gif"/>
    <img src="https://i1.mbsvr.net/images/right.gif"/>
    <img src="https://i1.mbsvr.net/images/right2.gif"/>
</div></div>
<div id="wrapper">
	<div id="wrapper2">
		<!-- HEADER CONTENT STARTS HERE -->
		<div id="header" class="slim">			<!-- logo -->			<a href="https://www.moneybookers.com/app/" tabindex="1" accesskey="h" title="skrill.com - and money moves" class="mb_logo_top_left"><strong>skrill.com - and money moves</strong></a>			<hr />
						<!-- languages -->
			<a id="access-navigation" class="anchor">Languages</a>
			<ul id="top_nav_language">				  <li class="en" title="English">                  <a                       href="/app/test_payment.pl?l=EN"                      id="topnavlanguage_selected">English</a>                  </li>				  <li class="de" title="German">                  <a                       href="/app/test_payment.pl?l=DE">German</a>                  </li>				  <li class="fr" title="French">                  <a                       href="/app/test_payment.pl?l=FR">French</a>                  </li>				  <li class="es" title="Spanish">                  <a                       href="/app/test_payment.pl?l=ES">Spanish</a>                  </li>				  <li class="it" title="Italian">                  <a                       href="/app/test_payment.pl?l=IT">Italian</a>                  </li>				  <li class="pl" title="Polish">                  <a                       href="/app/test_payment.pl?l=PL">Polish</a>                  </li>				  <li class="gr" title="Greek">                  <a                       href="/app/test_payment.pl?l=GR">Greek</a>                  </li>				  <li class="ro" title="Romanian">                  <a                       href="/app/test_payment.pl?l=RO">Romanian</a>                  </li>				  <li class="ru" title="Russian">                  <a                       href="/app/test_payment.pl?l=RU">Russian</a>                  </li>				  <li class="tr" title="Turkish">                  <a                       href="/app/test_payment.pl?l=TR">Turkish</a>                  </li>				  <li class="cn" title="Chinese">                  <a                       href="/app/test_payment.pl?l=CN">Chinese</a>                  </li>				  <li class="cz" title="Czech
">                  <a                       href="/app/test_payment.pl?l=CZ">Czech
</a>                  </li>			</ul>				<!-- aboutus navigation -->
				<a id="access-navigation" class="anchor">Navigation</a>				<ul id="top_nav1">
					<li class="home"><a href="https://www.moneybookers.com/app/" id="topnav1_selected">home</a> | </li>
					<li class="fees"><a href="https://www.moneybookers.com/app/help.pl?s=fees" accesskey="f">fees</a> | </li>					<li class="benefits"><a href="https://www.moneybookers.com/app/help.pl?s=benefits" accesskey="b">benefits</a> | </li>					<li class="contact"><a href="https://www.moneybookers.com/app/help.pl?s=contact" accesskey="c">contact</a> | </li>
					<li class="faq"><a href="https://www.moneybookers.com/app/faq.pl" accesskey="a">faq</a></li>
				</ul>				<br class="clear" />
			
				<!-- tabs -->				<div id="TopNav">					<ul class="home">
					<li><a href="https://www.moneybookers.com/app/" accesskey="h"><b><span>HOME</span></b></a></li>
					</ul>					<ul class="consumer">
					<li><a href="https://www.moneybookers.com/app/consumer.pl" accesskey="c"><b><span>CONSUMERS</span></b></a></li>
					</ul>					<ul class="business">
					<li><a href="https://www.moneybookers.com/app/business.pl" accesskey="b"><b><span>BUSINESS</span></b></a></li>
					</ul>					<ul class="products">
					<li><a href="https://www.moneybookers.com/app/products.pl" accesskey="p"><b><span>PRODUCTS</span></b></a></li>
					</ul>					<ul class="skrill">
					<li><a href="https://www.moneybookers.com/app/skrill.pl" accesskey="s"><b><span>SKRILL</span></b></a></li>
					</ul>				</div>
				<br class="clear" />	</div>
<!-- HEADER CONTENT ENDS HERE -->

<hr />	<div id="header_content">
	<span class="header_content">
		<a href="https://www.moneybookers.com/app/register.pl" class="home_signupnow">Register</a> <em>|</em>
		<a href="https://www.moneybookers.com/app/login.pl" class="home_login">login</a>
        <!-- XXX: This will be removed very soon -->	</span>
	</div>





<script type="text/javascript" src="https://i1.mbsvr.net/main.js"></script>
<script type="text/javascript" src="https://i1.mbsvr.net/ourlib.js"></script>
<div id="ourDiv" style="position:absolute; visibility:hide; z-index:9;"></div>

<link rel="styleSheet" href="https://i1.mbsvr.net/css/test_payment.css?version=v1.1" type="text/css" media="screen" />

<script type="text/javascript">
    function get_html_code() {
        var html = '&lt;form action="https://www.moneybookers.com/app/payment.pl" target="_blank"&gt;'+'<br/>';

        for ( var i = 0; i < document.test_payment_form.length; i++ )
            if (
                   document.test_payment_form.elements[i].type != 'submit' 
                && document.test_payment_form.elements[i].type != 'button' 
                && document.test_payment_form.elements[i].value != ''
            )
                html += '    &lt;input type="hidden" name="'+document.test_payment_form.elements[i].name+'" value="'+document.test_payment_form.elements[i].value+'"&gt;' + '<br/>';

        html += '    &lt;input type="submit" name="Pay" value="Pay"&gt;' + '<br/>';
        html += '&lt;/form&gt;' + '<br/>';

        return html;
    }

    function create_merchant_fields() {
        var html = '';

        var fields = new String(document.test_payment_form.merchant_fields.value).split(/[,;]/);

        for ( var i = 0; i < fields.length; i++ ) {
            fields[i] = trim(fields[i].replace(/["'\(\)]/g, ''));

            if (fields[i].replace(/\s/g, '') == '') continue;

            html += '<div id="'+fields[i]+'" class="field">'
            html += '<label>'+fields[i]+'</label><input name="'+fields[i]+'" value="">';
            html += '</div>';
        }

        lwr(html, 'merchant_fields_section');


        old_fields = fields;
    }


    function check() {
        var req_fields = new Array("pay_to_email","language","currency","detail1_description","detail1_text");
        var err_msg = 'Please enter a value for ';

        for ( i = 0; i < req_fields.length; i++ ) {
            fld = eval("document.test_payment_form."+req_fields[i]);
            if ( fld.value == "" ) {
                alert(err_msg + req_fields[i]);
                try { fld.focus(); } catch (err) {};
                return false;
            }
        }

        return true;
    }

    function addOption(src,target)
    {
        if (src.selectedIndex==0) return;
        for (i = src.length - 1; i>=0; i--) {
            if (src.options[i].selected) {
                target.options[target.options.length] = new Option(src.options[i].text,src.options[i].value);
                src.remove(i);
                if (i<src.length) src.options[i].selected=true;
            }
        }
        var el = (src.id=="pm2")?src:target;
        var hparam = document.getElementById("payment_methods");
        hparam.value='';
        for (i = el.length - 1; i>=1; i--)
        {
            hparam.value+=el.options[i].value+",";
        }
    }
</script>
<div id="central_column"> 
	<div id="content_left" class="">		<ul  id="left_nav"><style>
	ul#left_nav li {
	clear: none !important;
	}
</style>			<li>
			<a href="https://www.moneybookers.com/app/help.pl?s=merchant">Home</a>		
	</li>			<li>
			<a href="https://www.moneybookers.com/app/help.pl?s=m_paymentoptions" style="font-weight: bold;color: #656565; background-image: url(../images/skrill/bullet_on.png); background-position: 1px 12px;">Payment options</a>			<ul>			<li >					<a href="https://www.moneybookers.com/app/help.pl?s=m_paymentoptions">Email Pay</a>			</li>			<li style="padding-bottom: 6px">					<a href="https://www.moneybookers.com/app/help.pl?s=m_shoppingcart" style="font-weight: bold;">Gateway</a>			</li>		</ul>	
	</li>			<li>
			<a href="https://www.moneybookers.com/app/help.pl?s=m_tools">Tools</a>		
	</li>			<li>
			<a href="https://www.moneybookers.com/app/help.pl?s=m_info">Info/Help</a>		
	</li>			<li>
			<a href="https://www.moneybookers.com/app/help.pl?s=m_contact">Contact</a>		
	</li>
</ul>
<div id="mb_mer_accept">
	<img src="https://i1.mbsvr.net/images/mrc_logos.gif" ><br><br>Accept credit/debit cards!

<!-- Start of Code For CheckRate  NB - WORKS ONLY ON PRODUCTION -->
	<div class="check_rate">
	<!-- Begin CheckRate code -->
<script type="text/javascript" src="https://secure.checkrate.co.uk/checkrate-verify.js"></script>
<script  type="text/javascript">
    _ucrid = 413;
    _ucbtn = "08a_verified_website";
    _ucbck = "ffffff";
    _ucbtn_score = "1";
    _ucweb = "1";
    activateOperation();
</script>
<!-- End CheckRate code -->
	</div>
<!-- End of Code For CheckRate  NB - WORKS ONLY ON PRODUCTION -->
</div>
<ul>
</ul>			</div>	<!-- CENTER COLUMN CONTENT STARTS HERE -->	<div id="content_center" >
		<a id="access-content" class="anchor">&nbsp;</a>
		<div id="left_right_l" class="left_right_l" ><h1> CUSTOMISE YOUR OWN MERCHANT GATEWAY</h1>    <div id="warning"><span id="required">Warning!</span> This form is meant to demonstrate the various scenarios for which our gateway could be used. However, any transactions confirmed while experimenting with the gateway will be processed as <b>REAL</b> payments.</div>
<form name="test_payment_form" action="https://www.moneybookers.com/app/payment.pl" method="post" target="_blank" id="test_payment_form">
    <dl id="auto_form_fields">        <dt class="title first" >[<span>+</span>] Merchant Details</dt>        <dd class="fgroup">            <div id="div_pay_to_email" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Email address of the merchant\'s moneybookers.com account'));" onMouseOut="return nd();">pay_to_email</a>&nbsp;<span id="required">*</span>                </label>                        <input type="text" name="pay_to_email" value="" />            </div>            <div id="div_recipient_description" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Description of merchant shown in the payment details title. Field limit is 30 symbols, if its value is more than 30, field value is disregarded.'));" onMouseOut="return nd();">recipient_description</a>                </label>                        <input type="text" name="recipient_description" value="" />            </div>            <div id="div_transaction_id" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Reference or identification number provided by the merchant.'));" onMouseOut="return nd();">transaction_id</a>                </label>                        <input type="text" name="transaction_id" value="" />            </div>            <div id="div_return_url" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('URL to which the customer will be returned when the payment is made. If this field is not filled, the merchant gateway window will simply close automatically at the end of the transaction, so that the customer will be returned to the last page on the merchant\'s website where he has been before.'));" onMouseOut="return nd();">return_url</a>                </label>                        <input type="text" name="return_url" value="" />            </div>            <div id="div_return_url_text" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('The text on the button when the user finish its payment.'));" onMouseOut="return nd();">return_url_text</a>                </label>                        <input type="text" name="return_url_text" value="" />            </div>            <div id="div_return_url_target" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Number identifying the target frame for opening return_url. Valid values are 1,2,3,4 <ul><li>1 => _top</li><li>2 => _parent</li><li>3 => _self</li><li>4 =>_blank</li></ul><br />Default: 1 <br />For Details: http://www.w3.org/TR/html401/types.html#type-frame-target'));" onMouseOut="return nd();">return_url_target</a>                </label>                        <input type="text" name="return_url_target" value="1" />            </div>            <div id="div_cancel_url" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('URL to which the customer will be returned if the payment process is cancelled. If this field is not filled, the merchant gateway window will simply close automatically upon clicking the cancellation button, so the customer will be returned to the last page on the merchant\'s website where the customer has been before.'));" onMouseOut="return nd();">cancel_url</a>                </label>                        <input type="text" name="cancel_url" value="" />            </div>            <div id="div_cancel_url_target" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Number identifying the target frame for opening cancel_url. Valid values are 1,2,3,4 <ul><li>1 => _top</li><li>2 => _parent</li><li>3 => _self</li><li>4 =>_blank</li></ul><br />Default: 1 <br />For Details: http://www.w3.org/TR/html401/types.html#type-frame-target'));" onMouseOut="return nd();">cancel_url_target</a>                </label>                        <input type="text" name="cancel_url_target" value="1" />            </div>            <div id="div_status_url" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('URL to which the transaction details will be posted after the payment process is complete. You may also specify an email address to which you would like to receive the results. If you do not specify anything you will not receive a notification.'));" onMouseOut="return nd();">status_url</a>                </label>                        <input type="text" name="status_url" value="" />            </div>            <div id="div_status_url2" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Second URL to which the transaction details will be posted after the payment process is complete. You may also specify an email address to which you would like to receive the results. If you do not specify anything you will not receive a notification.'));" onMouseOut="return nd();">status_url2</a>                </label>                        <input type="text" name="status_url2" value="" />            </div>            <div id="div_new_window_redirect" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('If 1 - The customer will be redirected to Sofort in a NEW window, if 0 - The customer will be redirected to Sofort in the SAME window, default is 0 '));" onMouseOut="return nd();">new_window_redirect</a>                </label>                        <input type="text" name="new_window_redirect" value="" />            </div>            <div id="div_dynamic_descriptor" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('the merchant\'s name on the customer\'s BS up to 100 characters'));" onMouseOut="return nd();">dynamic_descriptor</a>                </label>                        <input type="text" name="dynamic_descriptor" value="Descriptor" />            </div>            <div id="div_language" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('2-letter code of the language used for moneybookers\' pages.'));" onMouseOut="return nd();">language</a>&nbsp;<span id="required">*</span>                </label>                        <select name="language">                            <option value="EN">English</option>                            <option value="DE">German</option>                            <option value="FR">French</option>                            <option value="ES">Spanish</option>                            <option value="IT">Italian</option>                            <option value="PL">Polish</option>                            <option value="GR">Greek</option>                            <option value="RO">Romanian</option>                            <option value="RU">Russian</option>                            <option value="TR">Turkish</option>                            <option value="CN">Chinese</option>                            <option value="CZ">Czech
</option>                            <option value="NL">Dutch</option>                            <option value="DA">Danish</option>                            <option value="SV">Swedish</option>                            <option value="FI">Finnish</option>                            <option value="BG">Bulgarian</option>                        </select>            </div>            <div id="div_hide_login" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Hide login form on registration, it will be visible by clicking on link bellow.'));" onMouseOut="return nd();">hide_login</a>                </label>                        <input type="text" name="hide_login" value="" />            </div>            <div id="div_confirmation_note" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Merchant may show to the customer on the confirmation screen - the end step of the process - a note, confirmation number, PIN or any other message.'));" onMouseOut="return nd();">confirmation_note</a>                </label>                        <input type="text" name="confirmation_note" value="Samplemerchant wishes you pleasure reading your new book!" />            </div>            <div id="div_logo_url" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Merchant logo dispayed on top of gateway page.'));" onMouseOut="return nd();">logo_url</a>                </label>                        <input type="text" name="logo_url" value="" />            </div>            <div id="div_prepare_only" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Forces only SID to be returned without actual page.'));" onMouseOut="return nd();">prepare_only</a>                </label>                        <input type="text" name="prepare_only" value="" />            </div>            <div id="div_merchant_fields" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('A comma-separated list of field names that should be passed back to the merchant\'s server when the payment is confirmed at moneybookers.com (maximum 5 fields).'));" onMouseOut="return nd();">merchant_fields</a>                </label>                        <input name="merchant_fields" value="field1" onchange="javascript: create_merchant_fields();">
                        <div id="merchant_fields_section">
                        </div>            </div>        </dd>        <dt class="title " >[<span>+</span>] Customer Details</dt>        <dd class="fgroup">            <div id="div_pay_from_email" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Email address of the customer who is making the payment. If left emtpy, the customer has to enter his email address himself.'));" onMouseOut="return nd();">pay_from_email</a>                </label>                        <input type="text" name="pay_from_email" value="" />            </div>            <div id="div_title" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Customer\'s title'));" onMouseOut="return nd();">title</a>                </label>                        <input type="text" name="title" value="Mr" />            </div>            <div id="div_firstname" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Customer\'s firstname'));" onMouseOut="return nd();">firstname</a>                </label>                        <input type="text" name="firstname" value="John" />            </div>            <div id="div_lastname" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Customer\'s lastname'));" onMouseOut="return nd();">lastname</a>                </label>                        <input type="text" name="lastname" value="Payer" />            </div>            <div id="div_date_of_birth" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('The format of parameter should be DDMMYYYY'));" onMouseOut="return nd();">date_of_birth</a>                </label>                        <input type="text" name="date_of_birth" value="" />            </div>            <div id="div_address" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Customer\'s address (e.g. street)'));" onMouseOut="return nd();">address</a>                </label>                        <input type="text" name="address" value="11 Payerstr St" />            </div>            <div id="div_address2" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Customer\'s address (second field)'));" onMouseOut="return nd();">address2</a>                </label>                        <input type="text" name="address2" value="Payertown" />            </div>            <div id="div_phone_number" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Customer\'s phone number'));" onMouseOut="return nd();">phone_number</a>                </label>                        <input type="text" name="phone_number" value="0207123456" />            </div>            <div id="div_postal_code" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Customer\'s postal code/ZIP Code'));" onMouseOut="return nd();">postal_code</a>                </label>                        <input type="text" name="postal_code" value="EC45MQ" />            </div>            <div id="div_city" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Customer\'s city'));" onMouseOut="return nd();">city</a>                </label>                        <input type="text" name="city" value="Payertown" />            </div>            <div id="div_state" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Customer\'s state'));" onMouseOut="return nd();">state</a>                </label>                        <input type="text" name="state" value="Central London" />            </div>            <div id="div_country" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Customer\'s country'));" onMouseOut="return nd();">country</a>                </label>                        <select name="country">
                            <option value="">Please select</option>                            <option value="GBR"  selected >United Kingdom</option>                            <option value=" " >-------------------------</option>                            <option value="AFG" >Afghanistan</option>                            <option value="ALA" >Aland Islands</option>                            <option value="ALB" >Albania</option>                            <option value="DZA" >Algeria</option>                            <option value="ASM" >American Samoa</option>                            <option value="AND" >Andorra</option>                            <option value="AGO" >Angola</option>                            <option value="AIA" >Anguilla</option>                            <option value="ATA" >Antarctica</option>                            <option value="ATG" >Antigua And Barbuda</option>                            <option value="ARG" >Argentina</option>                            <option value="ARM" >Armenia</option>                            <option value="ABW" >Aruba</option>                            <option value="AUS" >Australia</option>                            <option value="AUT" >Austria</option>                            <option value="AZE" >Azerbaijan</option>                            <option value="BHS" >Bahamas</option>                            <option value="BHR" >Bahrain</option>                            <option value="BGD" >Bangladesh</option>                            <option value="BRB" >Barbados</option>                            <option value="BLR" >Belarus</option>                            <option value="BEL" >Belgium</option>                            <option value="BLZ" >Belize</option>                            <option value="BEN" >Benin</option>                            <option value="BMU" >Bermuda</option>                            <option value="BTN" >Bhutan</option>                            <option value="BOL" >Bolivia</option>                            <option value="BIH" >Bosnia-Herzegovina</option>                            <option value="BWA" >Botswana</option>                            <option value="BVT" >Bouvet Island</option>                            <option value="BRA" >Brazil</option>                            <option value="VGB" >British Virgin Islands</option>                            <option value="BRN" >Brunei Darussalam</option>                            <option value="BGR" >Bulgaria</option>                            <option value="BFA" >Burkina Faso</option>                            <option value="BDI" >Burundi</option>                            <option value="KHM" >Cambodia</option>                            <option value="CMR" >Cameroon</option>                            <option value="CAN" >Canada</option>                            <option value="CPV" >Cape Verde Islands</option>                            <option value="CYM" >Cayman Islands</option>                            <option value="CAF" >Central African Republic</option>                            <option value="TCD" >Chad</option>                            <option value="CHL" >Chile</option>                            <option value="CHN" >China (PR)</option>                            <option value="CXR" >Christmas Island</option>                            <option value="CCK" >Cocos (Keeling) Islands</option>                            <option value="COL" >Colombia</option>                            <option value="COM" >Comoros</option>                            <option value="COD" >Congo, Democratic Republic of</option>                            <option value="COG" >Congo, Republic of</option>                            <option value="COK" >Cook Islands</option>                            <option value="CRI" >Costa Rica</option>                            <option value="HRV" >Croatia</option>                            <option value="CUB" >Cuba</option>                            <option value="CYP" >Cyprus</option>                            <option value="CZE" >Czech Republic</option>                            <option value="DNK" >Denmark</option>                            <option value="DJI" >Djibouti</option>                            <option value="DMA" >Dominica</option>                            <option value="DOM" >Dominican Republic</option>                            <option value="ECU" >Ecuador</option>                            <option value="EGY" >Egypt</option>                            <option value="SLV" >El Salvador</option>                            <option value="GNQ" >Equatorial Guinea</option>                            <option value="ERI" >Eritrea</option>                            <option value="EST" >Estonia</option>                            <option value="ETH" >Ethiopia</option>                            <option value="FLK" >Falkland Islands</option>                            <option value="FRO" >Faroe Islands</option>                            <option value="FJI" >Fiji</option>                            <option value="FIN" >Finland</option>                            <option value="FRA" >France</option>                            <option value="GUF" >French Guyana</option>                            <option value="PYF" >French Polynesia</option>                            <option value="ATF" >French Southern Territories</option>                            <option value="GAB" >Gabon</option>                            <option value="GMB" >Gambia</option>                            <option value="GEO" >Georgia</option>                            <option value="DEU" >Germany</option>                            <option value="GHA" >Ghana</option>                            <option value="GIB" >Gibraltar</option>                            <option value="GRC" >Greece</option>                            <option value="GRL" >Greenland</option>                            <option value="GRD" >Grenada</option>                            <option value="GLP" >Guadeloupe</option>                            <option value="GUM" >Guam</option>                            <option value="GTM" >Guatemala</option>                            <option value="GGY" >Guernsey</option>                            <option value="GIN" >Guinea</option>                            <option value="GNB" >Guinea-Bissau</option>                            <option value="GUY" >Guyana</option>                            <option value="HTI" >Haiti</option>                            <option value="HMD" >Heard Island and McDonald Islands</option>                            <option value="VAT" >Holy See (Vatican City State)</option>                            <option value="HND" >Honduras</option>                            <option value="HKG" >Hong Kong</option>                            <option value="HUN" >Hungary</option>                            <option value="ISL" >Iceland</option>                            <option value="IND" >India</option>                            <option value="IDN" >Indonesia</option>                            <option value="IRN" >Iran</option>                            <option value="IRQ" >Iraq</option>                            <option value="IRL" >Ireland (Rep. Of)</option>                            <option value="IMN" >Isle of Man</option>                            <option value="ISR" >Israel</option>                            <option value="ITA" >Italy</option>                            <option value="CIV" >Ivory Coast</option>                            <option value="JAM" >Jamaica</option>                            <option value="JPN" >Japan</option>                            <option value="JEY" >Jersey</option>                            <option value="JOR" >Jordan</option>                            <option value="KAZ" >Kazakhstan</option>                            <option value="KEN" >Kenya</option>                            <option value="KIR" >Kiribati</option>                            <option value="PRK" >Korea (North)</option>                            <option value="KOR" >Korea (South)</option>                            <option value="KWT" >Kuwait</option>                            <option value="KGZ" >Kyrgyzstan</option>                            <option value="LAO" >Laos</option>                            <option value="LVA" >Latvia</option>                            <option value="LBN" >Lebanon</option>                            <option value="LSO" >Lesotho</option>                            <option value="LBR" >Liberia</option>                            <option value="LBY" >Libya</option>                            <option value="LIE" >Liechtenstein</option>                            <option value="LTU" >Lithuania</option>                            <option value="LUX" >Luxembourg</option>                            <option value="MAC" >Macao</option>                            <option value="MKD" >Macedonia, the Former Yugoslav Republic of</option>                            <option value="MDG" >Madagascar</option>                            <option value="MWI" >Malawi</option>                            <option value="MYS" >Malaysia</option>                            <option value="MDV" >Maldives</option>                            <option value="MLI" >Mali</option>                            <option value="MLT" >Malta</option>                            <option value="MHL" >Marshall Islands</option>                            <option value="MTQ" >Martinique</option>                            <option value="MRT" >Mauritania</option>                            <option value="MUS" >Mauritius</option>                            <option value="MYT" >Mayotte</option>                            <option value="MEX" >Mexico</option>                            <option value="FSM" >Micronesia, Federated States of</option>                            <option value="MDA" >Moldova</option>                            <option value="MCO" >Monaco</option>                            <option value="MNG" >Mongolia</option>                            <option value="MNE" >Montenegro</option>                            <option value="MSR" >Montserrat</option>                            <option value="MAR" >Morocco</option>                            <option value="MOZ" >Mozambique</option>                            <option value="MMR" >Myanmar</option>                            <option value="NAM" >Namibia</option>                            <option value="NPL" >Nepal</option>                            <option value="NLD" >Netherlands</option>                            <option value="ANT" >Netherlands Antilles</option>                            <option value="NCL" >New Caledonia</option>                            <option value="NZL" >New Zealand</option>                            <option value="NIC" >Nicaragua</option>                            <option value="NER" >Niger</option>                            <option value="NGA" >Nigeria</option>                            <option value="NIU" >Niue</option>                            <option value="NFK" >Norfolk Island</option>                            <option value="MNP" >Northern Mariana Islands</option>                            <option value="NOR" >Norway</option>                            <option value="OMN" >Oman</option>                            <option value="PAK" >Pakistan</option>                            <option value="PLW" >Palau</option>                            <option value="PSE" >Palestinian territory</option>                            <option value="PAN" >Panama</option>                            <option value="PNG" >Papua New Guinea</option>                            <option value="PRY" >Paraguay</option>                            <option value="PER" >Peru</option>                            <option value="PHL" >Philippines</option>                            <option value="PCN" >Pitcairn</option>                            <option value="POL" >Poland</option>                            <option value="PRT" >Portugal</option>                            <option value="PRI" >Puerto Rico</option>                            <option value="QAT" >Qatar</option>                            <option value="REU" >Reunion</option>                            <option value="ROU" >Romania</option>                            <option value="RUS" >Russia</option>                            <option value="RWA" >Rwanda</option>                            <option value="SHN" >Saint Helena</option>                            <option value="SPM" >Saint Pierre and Miquelon</option>                            <option value="SMR" >San Marino</option>                            <option value="STP" >Sao Tome E Principe</option>                            <option value="SAU" >Saudi Arabia</option>                            <option value="SEN" >Senegal</option>                            <option value="SRB" >Serbia</option>                            <option value="SYC" >Seychelles</option>                            <option value="SLE" >Sierra Leone</option>                            <option value="SGP" >Singapore</option>                            <option value="SVK" >Slovakia</option>                            <option value="SVN" >Slovenia</option>                            <option value="SLB" >Solomon Islands</option>                            <option value="SOM" >Somalia</option>                            <option value="ZAF" >South Africa</option>                            <option value="SGS" >South Georgia and the South Sandwich Islands</option>                            <option value="ESP" >Spain</option>                            <option value="LKA" >Sri Lanka</option>                            <option value="KNA" >St. Kitts And Nevis</option>                            <option value="LCA" >St. Lucia</option>                            <option value="VCT" >St. Vincent And The Grena</option>                            <option value="SDN" >Sudan</option>                            <option value="SUR" >Suriname</option>                            <option value="SJM" >Svalbard and Jan Mayen</option>                            <option value="SWZ" >Swaziland</option>                            <option value="SWE" >Sweden</option>                            <option value="CHE" >Switzerland</option>                            <option value="SYR" >Syria</option>                            <option value="TWN" >Taiwan (ROC)</option>                            <option value="TJK" >Tajikistan</option>                            <option value="TZA" >Tanzania</option>                            <option value="THA" >Thailand</option>                            <option value="TLS" >Timor-Leste</option>                            <option value="TGO" >Togo</option>                            <option value="TKL" >Tokelau</option>                            <option value="TON" >Tonga</option>                            <option value="TTO" >Trinidad And Tobago</option>                            <option value="TUN" >Tunisia</option>                            <option value="TUR" >Turkey</option>                            <option value="TKM" >Turkmenistan</option>                            <option value="TCA" >Turks and Caicos Islands</option>                            <option value="TUV" >Tuvalu</option>                            <option value="VIR" >US Virgin Islands</option>                            <option value="UGA" >Uganda</option>                            <option value="UKR" >Ukraine</option>                            <option value="ARE" >United Arab Emirates</option>                            <option value="USA" >United States of America</option>                            <option value="URY" >Uruguay</option>                            <option value="UZB" >Uzbekistan</option>                            <option value="VUT" >Vanuatu</option>                            <option value="VEN" >Venezuela</option>                            <option value="VNM" >Vietnam</option>                            <option value="WLF" >Wallis and Futuna</option>                            <option value="ESH" >Western Sahara</option>                            <option value="WSM" >Western Samoa</option>                            <option value="YEM" >Yemen</option>                            <option value="ZMB" >Zambia</option>                            <option value="ZWE" >Zimbabwe</option>                        </select>            </div>            <div id="div_rid" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Referal ID.Replaced by merchant\'s ID unless in P2P mode '));" onMouseOut="return nd();">rid</a>                </label>                        <input type="text" name="rid" value="" />            </div>            <div id="div_ext_ref_id" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Identifier to track merchant affiliates'));" onMouseOut="return nd();">ext_ref_id</a>                </label>                        <input type="text" name="ext_ref_id" value="" />            </div>        </dd>        <dt class="title " >[<span>+</span>] Payment Details</dt>        <dd class="fgroup">            <div id="div_amount" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('The total amount payable.'));" onMouseOut="return nd();">amount</a>&nbsp;<span id="required">*</span>                </label>                        <input type="text" name="amount" value="39.60" />            </div>            <div id="div_currency" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('3-letter code of the currency of the amount according to ISO 4217 (see Annex I of the manual for accepted currencies)'));" onMouseOut="return nd();">currency</a>&nbsp;<span id="required">*</span>                </label>                        <select name="currency">
                            <option value=""></option>                            <option value="AUD" >Australian Dollar</option>                            <option value="BHD" >Bahraini Dinar</option>                            <option value="GBP" >British Pound</option>                            <option value="BGN" >Bulgarian Leva</option>                            <option value="CAD" >Canadian Dollar</option>                            <option value="HRK" >Croatian kuna</option>                            <option value="CZK" >Czech Koruna</option>                            <option value="DKK" >Danish Krone</option>                            <option value="EUR"  selected >Euro</option>                            <option value="HKD" >Hong Kong Dollar</option>                            <option value="HUF" >Hungarian Forint</option>                            <option value="ISK" >Iceland Krona</option>                            <option value="INR" >Indian Rupee</option>                            <option value="ILS" >Israeli Shekel</option>                            <option value="JPY" >Japanese Yen</option>                            <option value="JOD" >Jordanian Dinar</option>                            <option value="KWD" >Kuwaiti dinar</option>                            <option value="LVL" >Latvian Lat</option>                            <option value="LTL" >Lithuanian litas</option>                            <option value="MYR" >Malaysian Ringgit</option>                            <option value="MAD" >Moroccan Dirham</option>                            <option value="TRY" >New Turkish Lira</option>                            <option value="NZD" >New Zealand Dollar</option>                            <option value="NOK" >Norwegian Krone</option>                            <option value="OMR" >Omani Rial</option>                            <option value="PLN" >Polish Zloty</option>                            <option value="QAR" >Qatari Rial</option>                            <option value="RON" >Romanian Leu New</option>                            <option value="SAR" >Saudi Riyal</option>                            <option value="RSD" >Serbian dinar</option>                            <option value="SGD" >Singapore Dollar</option>                            <option value="ZAR" >South-African Rand</option>                            <option value="KRW" >South-Korean Won</option>                            <option value="SEK" >Swedish Krona</option>                            <option value="CHF" >Swiss Franc</option>                            <option value="TWD" >Taiwan Dollar</option>                            <option value="THB" >Thailand Baht</option>                            <option value="TND" >Tunisian Dinar</option>                            <option value="USD" >U.S. Dollar</option>                            <option value="AED" >Utd. Arab Emir. Dirham
</option>                        </select>            </div>            <div id="div_amount2_description" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Merchant may specify a detailed calculation for the total amount payable. Please note that moneybookers does not check the validity of these data - they are only displayed in the details section of Step 2 of the payment process.'));" onMouseOut="return nd();">amount2_description</a>                </label>                        <input type="text" name="amount2_description" value="Product Price:" />            </div>            <div id="div_amount2" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('This amount in the currency defined in field \'currency\' will be shown next to amount2_description.'));" onMouseOut="return nd();">amount2</a>                </label>                        <input type="text" name="amount2" value="29.90" />            </div>            <div id="div_amount3_description" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Merchant may specify a detailed calculation for the total amount payable. Please note that moneybookers does not check the validity of these data - they are only displayed in the details section of Step 2 of the payment process.'));" onMouseOut="return nd();">amount3_description</a>                </label>                        <input type="text" name="amount3_description" value="Handling Fees:" />            </div>            <div id="div_amount3" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('This amount in the currency defined in field \'currency\' will be shown next to amount3_description.'));" onMouseOut="return nd();">amount3</a>                </label>                        <input type="text" name="amount3" value="3.10" />            </div>            <div id="div_amount4_description" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Merchant may specify a detailed calculation for the total amount payable. Please note that moneybookers does not check the validity of these data - they are only displayed in the details section of Step 2 of the payment process.'));" onMouseOut="return nd();">amount4_description</a>                </label>                        <input type="text" name="amount4_description" value="VAT (20%):" />            </div>            <div id="div_amount4" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('This amount in the currency defined in field \'currency\' will be shown next to amount3_description.'));" onMouseOut="return nd();">amount4</a>                </label>                        <input type="text" name="amount4" value="6.60" />            </div>            <div id="div_detail1_description" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Merchant may show up to 5 details about the product or transfer in the \'Payment Details\' section of Step 2 of the process. The detail1_descritpion is shown on the left side.'));" onMouseOut="return nd();">detail1_description</a>&nbsp;<span id="required">*</span>                </label>                        <input type="text" name="detail1_description" value="Product ID:" />            </div>            <div id="div_detail1_text" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('The detail1_text is shown on the right side of the \'Payment Details\' section. The detail1_text is also shown to the client in his history at moneybookers\' website.'));" onMouseOut="return nd();">detail1_text</a>&nbsp;<span id="required">*</span>                </label>                        <input type="text" name="detail1_text" value="4509334" />            </div>            <div id="div_detail2_description" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Merchant may show up to 5 details about the product or transfer in the \'Payment Details\' section of Step 2 of the process. The detail2_descritpion is shown on the left side.'));" onMouseOut="return nd();">detail2_description</a>                </label>                        <input type="text" name="detail2_description" value="Description:" />            </div>            <div id="div_detail2_text" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('The detail2_text is shown on the right side of the \'Payment Details\' section.'));" onMouseOut="return nd();">detail2_text</a>                </label>                        <input type="text" name="detail2_text" value="Romeo and Juliet (W. Shakespeare)" />            </div>            <div id="div_detail3_description" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Merchant may show up to 5 details about the product or transfer in the \'Payment Details\' section of Step 2 of the process. The detail3_descritpion is shown on the left side.'));" onMouseOut="return nd();">detail3_description</a>                </label>                        <input type="text" name="detail3_description" value="Seller ID:" />            </div>            <div id="div_detail3_text" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('The detail3_text is shown on the right side of the \'Payment Details\' section.'));" onMouseOut="return nd();">detail3_text</a>                </label>                        <input type="text" name="detail3_text" value="123456" />            </div>            <div id="div_detail4_description" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Merchant may show up to 5 details about the product or transfer in the \'Payment Details\' section of Step 2 of the process. The detail4_descritpion is shown on the left side.'));" onMouseOut="return nd();">detail4_description</a>                </label>                        <input type="text" name="detail4_description" value="Special Conditions:" />            </div>            <div id="div_detail4_text" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('The detail4_text is shown on the right side of the \'Payment Details\' section.'));" onMouseOut="return nd();">detail4_text</a>                </label>                        <input type="text" name="detail4_text" value="5-6 days for delivery" />            </div>        </dd>        <dt class="title " >[<span>+</span>] Recurring Billing Details</dt>        <dd class="fgroup">            <div id="div_rec_amount" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Recurrent payment amount.'));" onMouseOut="return nd();">rec_amount</a>                </label>                        <input type="text" name="rec_amount" value="" />            </div>            <div id="div_rec_start_date" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Start date of the recurrent payment.'));" onMouseOut="return nd();">rec_start_date</a>                </label>                        <input type="text" name="rec_start_date" value="" />            </div>            <div id="div_rec_end_date" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('End date of the recurrent payment.'));" onMouseOut="return nd();">rec_end_date</a>                </label>                        <input type="text" name="rec_end_date" value="" />            </div>            <div id="div_rec_period" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Period of the recurrent payment.'));" onMouseOut="return nd();">rec_period</a>                </label>                        <input type="text" name="rec_period" value="1" />            </div>            <div id="div_rec_grace_period" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Grace period of the recurrent payment.'));" onMouseOut="return nd();">rec_grace_period</a>                </label>                        <input type="text" name="rec_grace_period" value="1" />            </div>            <div id="div_rec_cycle" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Recurrent payment period cycle.'));" onMouseOut="return nd();">rec_cycle</a>                </label>                        <input type="text" name="rec_cycle" value="day" />            </div>            <div id="div_rec_status_url" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('URL to which we notify the merchant that the recurring payment is cancelled'));" onMouseOut="return nd();">rec_status_url</a>                </label>                        <input type="text" name="rec_status_url" value="" />            </div>            <div id="div_rec_status_url2" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Second URL to which we notify the merchant that the recurring payment is cancelled'));" onMouseOut="return nd();">rec_status_url2</a>                </label>                        <input type="text" name="rec_status_url2" value="" />            </div>        </dd>        <dt class="title " >[<span>+</span>] Skrill 1-Tap  Payment Details</dt>        <dd class="fgroup">            <div id="div_ondemand_max_amount" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Maximum amount the merchant can charge for each Skrill 1-Tap payment.'));" onMouseOut="return nd();">ondemand_max_amount</a>                </label>                        <input type="text" name="ondemand_max_amount" value="" />            </div>            <div id="div_ondemand_max_currency" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Currency of the ondemand_max_amount value.'));" onMouseOut="return nd();">ondemand_max_currency</a>                </label>                        <select name="ondemand_max_currency">
                            <option value=""></option>                            <option value="AUD" >Australian Dollar</option>                            <option value="BHD" >Bahraini Dinar</option>                            <option value="GBP" >British Pound</option>                            <option value="BGN" >Bulgarian Leva</option>                            <option value="CAD" >Canadian Dollar</option>                            <option value="HRK" >Croatian kuna</option>                            <option value="CZK" >Czech Koruna</option>                            <option value="DKK" >Danish Krone</option>                            <option value="EUR"  selected >Euro</option>                            <option value="HKD" >Hong Kong Dollar</option>                            <option value="HUF" >Hungarian Forint</option>                            <option value="ISK" >Iceland Krona</option>                            <option value="INR" >Indian Rupee</option>                            <option value="ILS" >Israeli Shekel</option>                            <option value="JPY" >Japanese Yen</option>                            <option value="JOD" >Jordanian Dinar</option>                            <option value="KWD" >Kuwaiti dinar</option>                            <option value="LVL" >Latvian Lat</option>                            <option value="LTL" >Lithuanian litas</option>                            <option value="MYR" >Malaysian Ringgit</option>                            <option value="MAD" >Moroccan Dirham</option>                            <option value="TRY" >New Turkish Lira</option>                            <option value="NZD" >New Zealand Dollar</option>                            <option value="NOK" >Norwegian Krone</option>                            <option value="OMR" >Omani Rial</option>                            <option value="PLN" >Polish Zloty</option>                            <option value="QAR" >Qatari Rial</option>                            <option value="RON" >Romanian Leu New</option>                            <option value="SAR" >Saudi Riyal</option>                            <option value="RSD" >Serbian dinar</option>                            <option value="SGD" >Singapore Dollar</option>                            <option value="ZAR" >South-African Rand</option>                            <option value="KRW" >South-Korean Won</option>                            <option value="SEK" >Swedish Krona</option>                            <option value="CHF" >Swiss Franc</option>                            <option value="TWD" >Taiwan Dollar</option>                            <option value="THB" >Thailand Baht</option>                            <option value="TND" >Tunisian Dinar</option>                            <option value="USD" >U.S. Dollar</option>                            <option value="AED" >Utd. Arab Emir. Dirham
</option>                        </select>            </div>            <div id="div_ondemand_note" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Text which should be shown to the customer on the Skrill 1-Tap confirmation step. Required if \'ondemand_max_amount\' is present.'));" onMouseOut="return nd();">ondemand_note</a>&nbsp;<span id="required">*</span>                </label>                        <input type="text" name="ondemand_note" value="" />            </div>            <div id="div_ondemand_status_url" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('URL to which we notify the merchant that the Skrill 1-Tap payment is cancelled'));" onMouseOut="return nd();">ondemand_status_url</a>                </label>                        <input type="text" name="ondemand_status_url" value="" />            </div>            <div id="div_ondemand_status_url2" class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Second URL to which we notify the merchant that the Skrill 1-Tap payment is cancelled'));" onMouseOut="return nd();">ondemand_status_url2</a>                </label>                        <input type="text" name="ondemand_status_url2" value="" />            </div>        </dd>        <dt class="title " >[<span>+</span>] Split Gateway</dt>        <dd class="fgroup">            <div id="div_ " class="field">
                <label>
                    <a href="javascript:;" onMouseOver="return ourlib(popup('Merchant may select payment method'));" onMouseOut="return nd();"> </a>                </label>                        <br />
                        <label>
                            <a href="javascript:;" onMouseOver="return ourlib(popup('Merchant may select payment method'));" onMouseOut="return nd();">payment_methods</a>                        </label>
                        <select name="pm" id="pm" size='5' multiple="true">
                            <option value="">SELECTED METHODS:</option>                            <option value="WLT">Pay from balance</option>                            <option value="NGP">Online Bank Transfer</option>                            <option value="OBT">OBT</option>                            <option value="GLU">Gluepay</option>                            <option value="IDL">Ideal</option>                            <option value="PWY">Przelewy24</option>                            <option value="PWY5">ING Bank &#346;l&#261;ski</option>                            <option value="PWY6">PKO BP (PKO Inteligo)</option>                            <option value="PWY7">Multibank (Multitransfer)</option>                            <option value="PWY14">Lukas Bank</option>                            <option value="PWY15">Bank BPH</option>                            <option value="PWY37">Kredyt Bank</option>                            <option value="PWY17">InvestBank</option>                            <option value="PWY18">PeKaO S.A.</option>                            <option value="PWY19">Citibank handlowy</option>                            <option value="PWY20">Bank Zachodni WBK (Przelew24)</option>                            <option value="PWY21">BG&#379;</option>                            <option value="PWY22">Millenium</option>                            <option value="PWY26">P&#322;ac&#281; z Inteligo</option>                            <option value="PWY25">mBank (mTransfer)</option>                            <option value="PWY28">Bank Ochrony &#346;rodowiska</option>                            <option value="PWY32">Nordea</option>                            <option value="PWY33">Fortis Bank</option>                            <option value="PWY36">Deutsche Bank PBC S.A,.</option>                            <option value="ACC">all credit/debit cards</option>                            <option value="VSA">VISA</option>                            <option value="MSC">MASTERCARD</option>                            <option value="VSD">DELTA / VISA DEBIT</option>                            <option value="VSE">VISA ELECTRON</option>                            <option value="AMX">AMERICAN EXPRESS</option>                            <option value="DIN">DINERS</option>                            <option value="JCB">JCB</option>                            <option value="MAE">MAESTRO</option>                            <option value="LSR">LASER</option>                            <option value="SLO">SOLO</option>                            <option value="GCB">Carte Bleue</option>                            <option value="SFT">Sofortueberweisung</option>                            <option value="DID">direct debit</option>                            <option value="GIR">Giropay</option>                            <option value="ENT">Enets</option>                            <option value="EBT">Solo sweden</option>                            <option value="SO2">Solo finland</option>                            <option value="NPY">eps (NetPay)</option>                            <option value="PLI">POLi</option>                            <option value="CSI">CartaSi</option>                            <option value="PSP">Postepay</option>                            <option value="EPY">ePay Bulgaria</option>                            <option value="BWI">BWI</option>                            <option value="MZM">Mazooma</option>                            <option value="PSC">PSC</option>                        </select>
                        
                        <input class="submit" style="width:20px;color:#ffffff;background-color: #717274;" type="button" value="&#9660; " onclick="addOption(document.getElementById('pm'),document.getElementById('pm2'))" /><br />
                        <label>
                            <a href="javascript:;" onMouseOver="return ourlib(popup('Merchant may select payment method'));" onMouseOut="return nd();">&nbsp;</a>                        </label>
                        <select multiple="true" size='5' id="pm2">
                            <option value="">SELECTED METHODS:</option>
                        </select>
                        <input class="submit" style="width:20px;color:#ffffff;background-color: #717274;" type="button" value="&#9650; " onclick="addOption(document.getElementById('pm2'),document.getElementById('pm'))" />
                        <input type="hidden" value="" name="payment_methods" id="payment_methods" />            </div>        </dd>    </dl><!-- End of Auto Form Fields -->
    <div style="text-align:center">		<input type="hidden" name="submit_id" value=""><button type="submit" 
		style="background: none;border:none;" 
		class="nodecoration"
		value="Submit" id="submit_id_button" 			onclick="return check()&&(document.test_payment_form.submit_id.value='Submit')">
<span class="button"><ul><li class="left"><span class="act_left">Submit</span></li><li class="right"><span class="act_right">&nbsp;</span></li></ul></span>
</button></div>
    <div id="submit_text">Only fields marked with <span id="required">*</span> are required - all others are optional features.</div>
</form>
    <hr/>
    <div id="html_text">If you have filled in all boxes above correctly, you may click the button below in order to generate the HTML code for you. You
may then copy this code just as it is into the html code of your website. It will then show a Pay-Button on your website. Please note that this code would only work for the product and price you have specified in the boxes above.</div>
    <div style="text-align:center"><button type="button" 
		style="background: none;border:none;" 
		class="nodecoration"
		value="Generate HTML!"			onclick="javascript: if (check()) lwr(get_html_code(),'html_code');">
<span class="button"><ul><li class="left"><span >Generate HTML!</span></li><li class="right"><span >&nbsp;</span></li></ul></span>
</button></div>		<div id="html_code">
        <hr/>
    </div>			<br class="clear" />
		</div>		<div id="left_right_r" class="left_right_r">				</div>	</div>	
	<div id="bottom_content" >
	</div>
	<!-- CENTER COLUMN CONTENT ENDS HERE -->
</div><script type="text/javascript">
    create_merchant_fields();    $('#auto_form_fields').find('dd').hide()
    $('#auto_form_fields').find('dt').click(
        function() {
            $(this).next().slideToggle();
            var sign_el = $(this).find('span')
            if(sign_el){
                var sign = sign_el.html();
                if( sign == '+'){
                    sign_el.html('-');
                } else {
                    sign_el.html('+');
                }
            }
        }
    );

    $("#auto_form_fields").find('dt').hover(
        function(){ $(this).addClass("title-hover"); },
        function(){ $(this).removeClass("title-hover");}
    );</script><br/>
	<div id="footer">
			<strong>                        <a target="_blank" href="http://corporate.skrill.com/">[about us]</a> |					    <a href="https://www.moneybookers.com/app/help.pl?s=fca">[fca regulation]</a> |										<a href="https://www.moneybookers.com/app/help.pl?s=laundering">[money laundering policy]</a> |
					<a href="https://www.moneybookers.com/app/help.pl?s=privacy">[privacy policy]</a> |
					<a href="https://www.moneybookers.com/app/help.pl?s=terms">[terms &amp; conditions]</a>                        | <a href="http://corporate.skrill.com/careers/">[careers]</a>			</strong>
	</div>		<div class="smallprint" style="text-align: center;">&copy; Skrill Ltd. All Rights Reserved. Use of this Web site is subject to our <a href="/app/help.pl?s=terms">Terms and Conditions</a> and <a href="/app/help.pl?s=privacy">Privacy Policy</a> including our use of cookies.<br/>
Registered in England and Wales under Company No 4260907. Registered office: Welken House, 10-11 Charterhouse Square, London, EC1M 6EH.<br/>
None of the information contained in this website constitutes, nor should be construed as Financial Advice.<br/>
Internal complaint handling procedures can be requested by contacting our <a href="/app/faqmessaging.pl">Customer Service Department</a>. <br/><br/><b><a href="/app/help.pl?s=ecrcpr">Electronic Commerce (EC Directive) Regulations 2002 &amp; Consumer Protection (Distance Selling) Regulations 2000 Notices</a></b></div>
</div> </div> 
<script language="JavaScript">                        repositionHints();//attach hints (if any) to anchors elements



</script><!-- Quantcast Tag -->
		<script type="text/javascript">
			var _qevents = _qevents || [];
			(function() {
				var elem = document.createElement('script');
				elem.src = (document.location.protocol == "https:" ? "https://secure" : "http://edge") + ".quantserve.com/quant.js"; elem.async = true;
				elem.type = "text/javascript";
				var scpt = document.getElementsByTagName('script')[0];
				scpt.parentNode.insertBefore(elem, scpt);
				}
			)();
			_qevents.push({	qacct:"p-36tsn1Cq2uBl6" });
		</script>

		<noscript>
			<div style="display:none;">
				<img src="//pixel.quantserve.com/pixel/p-36tsn1Cq2uBl6.gif" border="0" height="1" width="1" alt="Quantcast"/>
			</div>
		</noscript>
	<!-- End Quantcast tag -->
<!-- basename: test_payment, template_name: test_payment -->
<script type="text/javascript" src="https://i1.mbsvr.net/js/tracker/init.js?version=v1.2">/**/</script>
<script type="text/javascript"> customTracker(); </script>



</body>
</html>


</response>
  </resource>
</resources>
